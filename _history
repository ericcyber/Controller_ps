{"entries":[{"timestamp":1746533047056,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    "],[1,"additionalFilePaths\": ["],[0,"]\n}\n"]],"start1":231,"start2":231,"length1":44,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1746533047055,"editorVersion":"7.0.61","text":{"main.blocks":"","main.ts":"\r\n//% color=\"#31C7D5\" weight=10 icon=\"\\uf1d1\"\r\n namespace ps2controllerChn {\r\n\r\n    let chipSelect = DigitalPin.P12\r\n    pins.digitalWritePin(chipSelect, 1)\r\n\r\n    pins.spiPins(DigitalPin.P15, DigitalPin.P14, DigitalPin.P13)\r\n    pins.spiFormat(8, 3)\r\n    pins.spiFrequency(250000)\r\n\r\n    let pad = pins.createBuffer(6)\r\n    let connected = false\r\n\r\n    const poll_cmd = hex\r\n        `014200000000000000`\r\n\r\n    function send_command(transmit: Buffer): Buffer {\r\n        // 处理位顺序\r\n        transmit = reverse.rbuffer(transmit)\r\n\r\n        let receive = pins.createBuffer(transmit.length);\r\n\r\n        pins.digitalWritePin(chipSelect, 0);\r\n        // 实际发送命令\r\n        for (let i = 0; i < transmit.length; i++) {\r\n            receive[i] = pins.spiWrite(transmit[i]);\r\n        }\r\n        pins.digitalWritePin(chipSelect, 1)\r\n\r\n        // 处理位顺序\r\n        receive = reverse.rbuffer(receive)\r\n\r\n        return receive\r\n     }\r\n\r\n    export enum PS2Button {\r\n        //% blockId=\"Left\" block=\"Left向左方向键\"\r\n        Left,\r\n        //% blockId=\"Down\" block=\"Down向下方向键\"\r\n        Down,\r\n        //% blockId=\"Right\" block=\"Right向右方向键\"\r\n        Right,\r\n        //% blockId=\"Up\" block=\"Up向上方向键\"\r\n        Up,\r\n        //% blockId=\"Start\" block=\"开始(Start)按键\"\r\n        Start,\r\n        //% blockId=\"Analog_Left\" block=\"AnalogL右侧摇杆按下\"\r\n        Analog_Left,\r\n        //% blockId=\"Analog_Right\" block=\"AnanlogR左侧摇杆按下\"\r\n        Analog_Right,\r\n        //% blockId=\"Select\" block=\"选择(Select)按键\"\r\n        Select,\r\n        //% blockId=\"Square\" block=\"Sq正方形(□)按键\"\r\n        Square,\r\n        //% blockId=\"Cross\" block=\"X叉型(×)按键\"\r\n        Cross,\r\n        //% blockId=\"Circle\" block=\"O圆型(○)按键\"\r\n        Circle,\r\n        //% blockId=\"Triangle\" block=\"Tri三角形(△)按键\"\r\n        Triangle,\r\n        //% blockId=\"R1\" block=\"R1按键\"\r\n        R1,\r\n        //% blockId=\"L1\" block=\"L1按键\"\r\n        L1,\r\n        //% blockId=\"R2\" block=\"R2按键\"\r\n        R2,\r\n        //% blockId=\"L2\" block=\"L2按键\"\r\n        L2,\r\n        //% blockId=\"Buttons\" block=\"Buttons按键(空缺)\"\r\n        Buttons,\r\n        //% blockId=\"RX\" block=\"RX右侧摇杆X的值\"\r\n        RX,\r\n        //% blockId=\"RY\" block=\"RY右侧摇杆Y的值\"\r\n        RY,\r\n        //% blockId=\"LX\" block=\"LX左侧摇杆x的值\"\r\n        LX,\r\n        //% blockId=\"LY\" block=\"LY左侧摇杆Y的值\"\r\n        LY,\r\n     };\r\n\r\n    //% blockId=robotbit_button_pressed block=\"ButtonPressed设置PS2手柄|%b|按下\"\r\n    //% weight=99\r\n    //% blockGap=50\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n     export function button_pressed(b: PS2Button): number {\r\n        if(!connected) return 0x00\r\n\r\n        switch (b) {\r\n            case PS2Button.Left:\r\n                return pad[0] & 0x80 ? 0 : 1;\r\n            case PS2Button.Down:\r\n                return pad[0] & 0x40 ? 0 : 1;\r\n            case PS2Button.Right:\r\n                return pad[0] & 0x20 ? 0 : 1;\r\n            case PS2Button.Up:\r\n                return pad[0] & 0x10 ? 0 : 1;\r\n            case PS2Button.Start:\r\n                return pad[0] & 0x08 ? 0 : 1;\r\n            case PS2Button.Analog_Left:\r\n                return pad[0] & 0x04 ? 0 : 1;\r\n            case PS2Button.Analog_Right:\r\n                return pad[0] & 0x02 ? 0 : 1;\r\n            case PS2Button.Select:\r\n                return pad[0] & 0x01 ? 0 : 1;\r\n            case PS2Button.Square:\r\n                return pad[1] & 0x80 ? 0 : 1;\r\n            case PS2Button.Cross:\r\n                return pad[1] & 0x40 ? 0 : 1;\r\n            case PS2Button.Circle:\r\n                return pad[1] & 0x20 ? 0 : 1;\r\n            case PS2Button.Triangle:\r\n                return pad[1] & 0x10 ? 0 : 1;\r\n            case PS2Button.R1:\r\n                return pad[1] & 0x08 ? 0 : 1;\r\n            case PS2Button.L1:\r\n                return pad[1] & 0x04 ? 0 : 1;\r\n            case PS2Button.R2:\r\n                return pad[1] & 0x02 ? 0 : 1;\r\n            case PS2Button.L2:\r\n                return pad[1] & 0x01 ? 0 : 1;\r\n            case PS2Button.Buttons:\r\n                return ~((pad[1] << 8) | pad[0]) & 0xffff;\r\n            case PS2Button.RX:\r\n                return pad[2] - 0x80;\r\n            case PS2Button.RY:\r\n                return pad[3] - 0x80;\r\n            case PS2Button.LX:\r\n                return pad[4] - 0x80;\r\n            case PS2Button.LY:\r\n                return pad[5] - 0x80;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function poll(): boolean {\r\n        let buf = send_command(poll_cmd)\r\n        if (buf[2] != 0x5a) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            pad[i] = buf[3 + i];\r\n        }\r\n\r\n        connected = true\r\n\r\n        return true\r\n    }\r\n\r\n    basic.forever(function () {\r\n        poll();\r\n    })\r\n }\r\n\r\n","README.md":"","pxt.json":"{\n    \"name\": \"main_PS\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1746533122068}